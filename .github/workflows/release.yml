name: Release
on:
  push:
    tags:
      - v*

jobs:
  github-release:
    name: Create GitHub Release
    needs:
      - build-linux
      - build-darwin
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: dist-darwin
          path: dist-darwin
      - uses: actions/download-artifact@v1
        with:
          name: dist-linux
          path: dist-linux
      - uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          files: |
            dist-darwin/*
            dist-linux/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-hub:
    name: Release Container and Push to Docker Registry
    needs:
      - build-container
    runs-on: ubuntu-latest
    steps:
      - run: |
          docker login -u dskbot -p ${{secrets.docker_hub_access_token}}
          docker load -i container.tar
          make container-push

  build-container:
    name: Build Docker Container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          export VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,' | sed -e 's/^v//')

          make container-image
          docker save rundsk/dsk:${VERSION} > container.tar

  build-linux:
    name: Build Linux Binary
    runs-on: ubuntu-latest
    needs:
      - build-frontend
      - build-example-design-system
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: '1.16'
      - uses: actions/download-artifact@v1
        with:
          name: frontend-build
          path: frontend/build
      - uses: actions/download-artifact@v1
        with:
          name: example-design-system
          path: example
      - run: |
          export VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,' | sed -e 's/^v//')
          make dist/dsk-linux-amd64 dist/dsk-linux-amd64.tar.gz
      - uses: actions/upload-artifact@v1
        with:
          name: dist-linux
          path: dist

  build-darwin:
    name: Build Darwin Binary
    runs-on: macOS-latest
    needs:
      - build-frontend
      - build-example-design-system
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: '1.16'
      - uses: actions/download-artifact@v1
        with:
          name: frontend-build
          path: frontend/build
      - uses: actions/download-artifact@v1
        with:
          name: example-design-system
          path: example
      - run: |
          export VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,' | sed -e 's/^v//')
          make dist/dsk-darwin-amd64 dist/dsk-darwin-amd64.zip
      - uses: actions/upload-artifact@v1
        with:
          name: dist-darwin
          path: dist

  build-frontend:
    name: Build Builtin-Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - run: |
          cd frontend
          yarn install --production=true
          yarn build
        env:
          # Don't convert warnings to errors, we love our warnings.
          CI: false
      - uses: actions/upload-artifact@v1
        with:
          name: frontend-build
          path: frontend/build

  build-example-design-system:
    name: Build Example Design System
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          repository: rundsk/example-design-system
          ref: master
          path: example-design-system
      - uses: actions/upload-artifact@v1
        with:
          name: example-design-system
          path: ../example-design-system
